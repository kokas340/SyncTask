@page "/Groups"
@using BlazorSyncTask.Services
@using global::Shared.Dtos
@using System.Security.Claims
@using BlazorSyncTask.Services.Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities

<h2 class="mb-4 fw-bold">MY GROUPS</h2>
<AuthorizeView>
    <Authorized>
        @if (groups != null || pendingInvites != null)
        {
            <div style="display: flex; flex-wrap: wrap;">
                @if (groups != null)
                {
                    <div class="container">
                        <div class="row">
                            @foreach (var group in groups)
                            {
                                <div class="col-md-4">
                                    <div class="card mb-2" style="background-color: #B5ABCD;">
                                        <div class="card-body">
                                            <h4 style="color: black;">@group.groupName</h4>
                                            <p style="color: black;">Members: @group.members.Count</p>
                                            <p style="color: black;">Tasks: @group.tasks.Count</p>
                                            <button class="btn btn-sm btn-primary m-1 flex-fill" @onclick="() => OpenGroupInfo(group.id)">View Details</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="text-center">
                            <button class="btn btn-primary m-1 flex-fill " @onclick="CreateGroup">Create Group</button>
                        </div>
                    </div>
                }

                @if (pendingInvites != null && pendingInvites.Any())
                {
                    <div class="row">
                        @foreach (var invite in pendingInvites)
                        {
                            <div class="col-md-4" style="margin-bottom: 15px;">
                                <div class="card">
                                    <div class="card-body">
                                        <h4 style="color: black;">@invite.Group.groupName</h4>
                                        <p style="color: black;">Owner: @invite.Group.owner</p>
                                        <button @onclick="() => AcceptInvite(invite.Group.id)">Accept</button>
                                        <button @onclick="() => DeclineInvite(invite.Group.id)">Decline</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
                <p style="color: black;">No groups or pending invites available.</p>
            </div>
        }



    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    public static Task<AuthenticationState> AuthState { get; set; } = null!;

    [Inject]
    private IGroupsService GroupsService { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Parameter]
    public string Id { get; set; }

    private List<GroupDTO> groups;
    public List<GroupInviteDTO> pendingInvites;

    protected override async Task OnInitializedAsync()
    {
        await getGoups();
        await getPendingInvites();
    }

    private async Task getPendingInvites()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        pendingInvites = await GroupsService.GetAllGroupInvitesByUserId(Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value));
    }

    private async Task getGoups()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        groups = await GroupsService.GetAllGroupsByUserId(Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value));
    }

    private async Task CreateGroup()
    {
        NavigationManager.NavigateTo("/CreateGroup");
    }

    private void OpenGroupInfo(int groupId)
    {
        NavigationManager.NavigateTo($"/GroupInfo?id=" + groupId + "");
    }

    private async Task getPendingRequests()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        groups = await GroupsService.GetAllGroupsByUserId(Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value));
    }

    private async Task AcceptInvite(int invite)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        int userId = Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value);
        await GroupsService.AcceptInvite(userId, invite);
    }

    private async Task DeclineInvite(int invite)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        int userId = Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value);
        await GroupsService.DeclineInvite(userId, invite);
    }

}