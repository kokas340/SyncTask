@page "/CreateGroup"
@using global::Shared.Dtos
@using BlazorSyncTask.Services
@inject NavigationManager NavMgr
@inject IGroupsService GroupsService

<AuthorizeView>
    <Authorized>
        @if (showLoading)
        {
            <div class="loading-screen">
                <div class="spinner"></div>
                <div>Loading...</div>
            </div>
        }
        else
        {
            <div>
                <div class="row">
                    <div class="col-3"></div>
                    <div class="col-3">
                        <div class="form-group">
                            <label for="name">Group Name:</label>
                            <input id="name" class="form-control" @bind="@createGroupDto.groupName"/>
                        </div>
                        <button class="btn btn-primary" @onclick="CreateGroups">Create</button>
                    </div>
                    <div class="col-3">
                        <img src="group.png" class="img-fluid animated" alt="Image description">
                    </div>
                    <div class="col-3"></div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public static Task<AuthenticationState> AuthState { get; set; } = null!;
    private CreateGroupDto createGroupDto = new CreateGroupDto();
    DateTime startD, endD;
    private bool showLoading = false;

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    
    private async Task CreateGroups() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        createGroupDto.owner = Convert.ToInt32(authState.User.FindFirst(c => c.Type == "Id")?.Value);

        await GroupsService.CreateGroup(createGroupDto);
        await ShowLoading();
    }
    private async Task ShowLoading()
    {
        //loading test
        showLoading = true;
        StateHasChanged();
        await Task.Delay(500);
        showLoading = false;
        StateHasChanged();
        NavMgr.NavigateTo($"/Groups");
    }
}